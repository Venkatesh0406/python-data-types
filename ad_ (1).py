# -*- coding: utf-8 -*-
"""Ad .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XTR54hU2vf1lwwUo9JB59sAjPPscosMH
"""

##1) mention about problem statement
##2) talk about columns
##3) install the models and required libraries
##4) understand the data
##5) EDA
##6) i)univariate analysis
##ii)Bi-variate analysis
##iii)Multivariate analysis
##7)check the null-values or missing values
##i)trating the null-valuesnor missing values
##ii)drop null values if they are less than 5%
##8)check the duplicates
##i)drop duplicates
##9)treating the outliers
##i)check the outliers
##ii)remove outlieres
##iii)make the boxplot before and after the outliers
##10)Feature engineering
##i)Extract the features
##ii)create the features
##iii)select the features

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('/content/online_course_recommendation_v2.csv')
df.head()

df.tail()

df.info()

df.describe()

df.isnull().sum()

df.duplicated().sum()

# prompt: histplots

import matplotlib.pyplot as plt
# Assuming 'df' is your DataFrame as defined in the previous code.

plt.figure(figsize=(10, 6))
sns.histplot(df['rating'], kde=True) # Example with 'Rating' column
plt.title('Distribution of Course Ratings')
plt.xlabel('Rating')
plt.ylabel('Frequency')
plt.show()

# Example with another column (replace 'Column_Name' with an actual column)
plt.figure(figsize=(10, 6))
sns.histplot(df['difficulty_level'], kde=False) # Example without KDE for categorical data
plt.title('Distribution of Course Levels')
plt.xlabel('Course Level')
plt.ylabel('Frequency')
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns



# Set figure size
plt.figure(figsize=(14, 10))
plt.suptitle("Histograms of Online Course Features", fontsize=16)

# Select relevant numerical columns for histograms
features = ["course_duration_hours", "rating", "enrollment_numbers", "course_price", "feedback_score", "time_spent_hours", "previous_courses_taken"]

# Plot histograms
for i, col in enumerate(features):
    plt.subplot(3, 3, i + 1)  # Create a 3x3 grid of subplots
    sns.histplot(df[col], bins=20, kde=True, color="blue")  # KDE adds a smooth density curve
    plt.title(f"Distribution of {col.replace('_', ' ').title()}", fontsize=12)
    plt.xlabel(col.replace('_', ' ').title())
    plt.ylabel("Count")

plt.tight_layout(rect=[0, 0, 1, 0.96])  # Adjust layout to fit title
plt.show()
print

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Display the first few rows to verify dataset loading

# Set figure size
plt.figure(figsize=(14, 10))
plt.suptitle("Boxplots of Online Course Features", fontsize=16)

# Select relevant numerical columns for boxplots
features = ["course_duration_hours", "rating", "enrollment_numbers",
            "course_price", "feedback_score", "time_spent_hours", "previous_courses_taken"]

# Plot boxplots
for i, col in enumerate(features):
    if col not in df.columns:
        print(f"Skipping {col}: Column not found in dataset")
        continue

    plt.subplot(3, 3, i + 1)  # Create a 3x3 grid of subplots
    sns.boxplot(y=df[col], color="green")  # Boxplot for each feature
    plt.title(f"Boxplot of {col.replace('_', ' ').title()}", fontsize=12)
    plt.ylabel(col.replace('_', ' ').title())

plt.tight_layout(rect=[0, 0, 1, 0.96])  # Adjust layout to fit title
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Select only numeric columns for correlation
numeric_df = df.select_dtypes(include=["number"])

# Compute the correlation matrix for numeric features
correlation_matrix = numeric_df.corr()

# Set figure size
plt.figure(figsize=(12, 8))
plt.suptitle("Correlation Heatmap of Online Course Features", fontsize=16)

# Create the heatmap
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm", linewidths=0.5)

# Show the heatmap
plt.show()

# prompt: remove outliers

import numpy as np
# Calculate the IQR for each numeric column
numeric_cols = df.select_dtypes(include=np.number).columns
for col in numeric_cols:
    Q1 = df[col].quantile(0.25)
    Q3 = df[col].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR

    # Identify outliers
    outliers = df[(df[col] < lower_bound) | (df[col] > upper_bound)]

    # Remove outliers (modify as needed: replace, cap, etc.)
    df = df[(df[col] >= lower_bound) & (df[col] <= upper_bound)]

df.shape

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Display the first few rows to verify dataset loading

# Set figure size
plt.figure(figsize=(14, 10))
plt.suptitle("Boxplots of Online Course Features", fontsize=16)

# Select relevant numerical columns for boxplots
features = ["course_duration_hours", "rating", "enrollment_numbers",
            "course_price", "feedback_score", "time_spent_hours", "previous_courses_taken"]

# Plot boxplots
for i, col in enumerate(features):
    if col not in df.columns:
        print(f"Skipping {col}: Column not found in dataset")
        continue

    plt.subplot(3, 3, i + 1)  # Create a 3x3 grid of subplots
    sns.boxplot(y=df[col], color="green")  # Boxplot for each feature
    plt.title(f"Boxplot of {col.replace('_', ' ').title()}", fontsize=12)
    plt.ylabel(col.replace('_', ' ').title())

plt.tight_layout(rect=[0, 0, 1, 0.96])  # Adjust layout to fit title
plt.show()

# prompt: univeriant graphs

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Assuming 'df' is your DataFrame as defined in the previous code.
# ... (Your previous code for data loading and preprocessing)

# Univariate analysis plots for relevant features
features_for_univariate_analysis = ["course_duration_hours", "rating",
                                     "enrollment_numbers", "course_price",
                                     "feedback_score", "time_spent_hours",
                                     "previous_courses_taken", "difficulty_level"]

for col in features_for_univariate_analysis:
    if col not in df.columns:
        print(f"Skipping {col}: Column not found in dataset")
        continue

    plt.figure(figsize=(8, 6))

    if pd.api.types.is_numeric_dtype(df[col]):  # Check if the column is numeric
        sns.histplot(df[col], kde=True)
        plt.title(f"Distribution of {col.replace('_', ' ').title()}")
    else:  # Treat as categorical
        sns.countplot(y=df[col])  # Use countplot for categorical features
        plt.title(f"Counts of {col.replace('_', ' ').title()}")

    plt.xlabel(col.replace('_', ' ').title())
    plt.ylabel("Frequency/Count")
    plt.show()


# Box Plots for Numerical Columns
numeric_cols = df.select_dtypes(include=np.number).columns

for col in numeric_cols:
  plt.figure(figsize=(6, 4))
  sns.boxplot(y=df[col])
  plt.title(f'Box plot of {col}')
  plt.show()

# prompt: bivarient graphs

import matplotlib.pyplot as plt
# Bivariate Analysis: Scatter Plots

# Select pairs of features for scatter plots
feature_pairs = [
    ("course_duration_hours", "enrollment_numbers"),
    ("rating", "enrollment_numbers"),
    ("course_price", "enrollment_numbers"),
    ("feedback_score", "rating"),
    ("time_spent_hours", "course_duration_hours"),
    ("previous_courses_taken", "enrollment_numbers")
]

for col1, col2 in feature_pairs:
    if col1 not in df.columns or col2 not in df.columns:
        print(f"Skipping pair ({col1}, {col2}): One or both columns not found in dataset")
        continue

    plt.figure(figsize=(8, 6))
    sns.scatterplot(x=df[col1], y=df[col2])
    plt.title(f"Scatter Plot of {col1.replace('_', ' ').title()} vs {col2.replace('_', ' ').title()}")
    plt.xlabel(col1.replace('_', ' ').title())
    plt.ylabel(col2.replace('_', ' ').title())
    plt.show()


# Bivariate Analysis: Categorical vs Numerical (Box Plots)
categorical_cols = ["difficulty_level", "course_category"]  # Add other categorical columns if needed

for cat_col in categorical_cols:
  if cat_col not in df.columns:
    print(f"Skipping {cat_col}: Column not found in dataset")
    continue

  for num_col in numeric_cols:
    if num_col not in df.columns:
        print(f"Skipping {num_col}: Column not found in dataset")
        continue

    plt.figure(figsize=(8,6))
    sns.boxplot(x=df[cat_col], y=df[num_col])
    plt.title(f'Box plot of {num_col} by {cat_col}')
    plt.show()

# prompt: mutlivariant graphs

import matplotlib.pyplot as plt
# Assuming 'df' is your DataFrame as defined in the previous code.
# ... (Your previous code for data loading and preprocessing)

# Multivariate Analysis: Pair Plots
# Select relevant features for pair plot
features_for_pairplot = ["course_duration_hours", "rating", "enrollment_numbers",
                         "course_price", "feedback_score", "time_spent_hours",
                         "previous_courses_taken"]

# Create the pair plot
sns.pairplot(df[features_for_pairplot])
plt.suptitle("Pair Plot of Selected Features", y=1.02)  # Adjust title position
plt.show()

#1)mention about problem statement
#2)talk about columns
#3)install the models and required libraries
#4)Load dataset
#5)understand your data
#6)EDA
 #i)univariate analysis
 #ii)Bi-variate analysis
 #iii)Multivariate analysis
#7)check the null-values or missing values
 #i)treating the null values(fill with mean,median or mode)
 #ii) drop null values if they are less than 5%
#8) check the duplicates
 #i) drop duplicates
#9)treating the outliers
 #i)check the outliers
 #ii)remove outliers
 #iii) make the box plot before and after the outliers
 #10)feature engineering
 #i)extract the features
 #ii)select the features
 #iii)select the feature
 ## b)checking the multicoliniarity
 ## i)heat map
 ## ii)vif technique
 ## c)transformation
 ## i)one hot encoding or label encoding
 ## ii)X-y features split
 ## 12)train test split