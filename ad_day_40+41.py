# -*- coding: utf-8 -*-
"""ad day 40+41.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1srFpQIOqQz3SEG7UWOD8RW5HboSWykVY
"""

!pip install streamlit

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, precision_score,recall_score,f1_score,roc_auc_score,confusion_matrix

data=pd.read_csv(r"/content/Heart_Disease_Dataset.csv")

data.tail()

data.shape

data.info()

data.describe()

data[data.duplicated]

len(data[data.duplicated()])

##
for column in data.columns:
  print(data[column].value_counts())

data = pd.get_dummies(data, columns=['Diabetic'], drop_first=True) # Corrected 'cloumns' to 'columns' and 'drop_frist' to 'drop_first'
data.head()

##convert binary categorical variables into numerical columns
binary_columns=["Smoking","AlcoholDrinking","Stroke","DiffWalking",'PhysicalActivity',"Asthma",'KidneyDisease', 'SkinCancer']
for col in binary_columns:
    data[col]=data[col].map({'Yes':1,"No":0})



data = pd.get_dummies(data, columns=["Sex", "AgeCategory", "Race", "GetHealth"], drop_first=True)
data.head()

print(data.columns)
data = pd.get_dummies(data, columns=["Sex", "AgeCategory", "Race", "GenHealth"], drop_first=True)

#train  -test splitting
X_train, X_test, y_train, y_test = train_test_split(data.drop('HeartDisease', axis=1), data['HeartDisease'], test_size=0.2, random_state=42)

clf=DecisionTreeClassifier(max_depth=5,criterion="gini",random_state=42)
clf.fit(X_train,y_train)

# Make predictions
y_pred = clf.predict(X_test)

# Calculate evaluation metrics
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)
roc_auc = roc_auc_score(y_test, y_pred)

# Print metrics
print(f"Accuracy: {accuracy:.2f}")
print(f"Precision: {precision:.2f}")
print(f"Recall: {recall:.2f}")
print(f"F1-Score: {f1:.2f}")
print(f"AUC-ROC: {roc_auc:.2f}")

# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

