# -*- coding: utf-8 -*-
"""ad day 57+58.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10sqJbaVLSB7ZXVpIcIrknPWcldALmXb-
"""

# SVM classification
import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
from sklearn.preprocessing import StandardScaler

from sklearn import svm
from sklearn.svm import SVC
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import classification_report

from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.model_selection import train_test_split, cross_val_score

filename = '/content/pima-indians-diabetes.data.csv'
names = ['preg', 'plas', 'pres', 'skin', 'test', 'mass', 'pedi', 'age', 'class']
dataframe = pd.read_csv(filename, names=names)
array = dataframe.values
X = array[:,0:8]
Y = array[:,8]

dataframe

X_train, X_test, y_train, y_test = train_test_split(X,Y, test_size = 0.3)

X_train.shape, y_train.shape, X_test.shape, y_test.shape

clf = SVC()
param_grid = [{'kernel':['rbf'],'gamma':[50,5,10,0.5],'C':[15, 14, 13, 12, 11, 10, 0.1, 0.001]}]
gsv = GridSearchCV(clf, param_grid, cv=10)
gsv.fit(X_train, y_train)

gsv.best_params_, gsv.best_score_

clf = SVC(C= 15, gamma = 50)
clf.fit(X_train, y_train)
y_pred = clf.predict(X_test)
acc = accuracy_score(y_test, y_pred) * 100
print("Accuracy =", acc)
confusion_matrix(y_test, y_pred)

import joblib
import pickle

joblib.dump(clf,"model.pkl")

from flask import Flask, request, render_template
import pickle
import numpy as np

app = Flask(__name__)
model = joblib.load('model.pkl')

@app.route('/')
def home():
  return "Welcome to the ML Model API!"

@app.route('/predict',methods=['POST'])
def predict():
  data = request.get__json()
  features = np.array(data['features']).reshape(1,-1)
  prediction = model.predict(features)
  return jsonfy({'prediction' : prediction.tolist()})

if__name__=='__main__':
  app.run(debug=True , port=5001)

url = "http://127.0.0.1.5001/predict"
data = {"features": [6,148,72,35,0,33.6,0.627,50]}